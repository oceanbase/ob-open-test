package obopentest_ob

import (
	"context"
	"io/ioutil"
	"ob-open-test/k8sController"
	"ob-open-test/util"

	"gopkg.in/yaml.v3"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	appsv1 "k8s.io/client-go/applyconfigurations/apps/v1"
	v12 "k8s.io/client-go/applyconfigurations/core/v1"
	log "k8s.io/klog/v2"
)

type OBProxy struct {
	Ns string
}

func (c *OBProxy) Check() bool {
	if !k8sController.NamespaceExist(c.Ns) {
		err := k8sController.CreateNamespace(c.Ns)
		if err != nil {
			return false
		}
	}
	return true
}
func (c *OBProxy) Apply() error {
	kc := k8sController.K8sClient()
	//apply Deployment
	deploymentConf, err := getOBProxyDeploymentConfByBaseYaml(c.Ns)
	if err != nil {
		log.Warning(err)
		return err
	}
	opts := metav1.ApplyOptions{
		TypeMeta: metav1.TypeMeta{
			Kind:       *deploymentConf.Kind,
			APIVersion: *deploymentConf.APIVersion,
		},
	}
	_, err = kc.AppsV1().Deployments(c.Ns).Apply(context.TODO(), deploymentConf, opts)
	if err != nil {
		log.Warning(err)
		return err
	}

	//apply Service
	serviceConf, err := getOBProxyServiceConfByBaseYaml(c.Ns)
	if err != nil {
		log.Warning(err)
		return err
	}

	opts.TypeMeta.APIVersion = *serviceConf.APIVersion
	opts.TypeMeta.Kind = *serviceConf.Kind
	_, err = kc.CoreV1().Services(c.Ns).Apply(context.TODO(), serviceConf, opts)
	if err != nil {
		log.Warning(err)
		return err
	}
	return nil

	//obproxyPath
	//obProxyServiceApplyConfiguration := &v12.ServiceApplyConfiguration{
	//	TypeMetaApplyConfiguration: v13.TypeMetaApplyConfiguration{
	//		Kind:       nil,
	//		APIVersion: nil,
	//	},
	//	ObjectMetaApplyConfiguration: nil,
	//	Spec:                         nil,
	//	Status:                       nil,
	//}
	//fmt.Println(obProxyServiceApplyConfiguration)
	//if err = k8sController.ApplyPath(clusConf, util.OBProxyPath); err != nil {
	//	log.Warning(err)
	return err
	//}
	//prometheus
	//if err = k8sController.ApplyPath(clusConf, prometheusPath); err != nil {
	//	log.Warning(err)
	return err
	////}
	//kc := k8sController.K8sClient()
	////var replicas int32 = 3
	//
	//kc.AppsV1().Deployments(c.Ns).Apply(context.TODO(), nil, nil)
	//kc.CoreV1().Services(c.Ns).Apply()

}
func (c *OBProxy) Delete() error {
	return nil
}

func getOBProxyDeploymentConfByBaseYaml(ns string) (*appsv1.DeploymentApplyConfiguration, error) {

	conf := appsv1.DeploymentApplyConfiguration{}
	yamlFile, err := ioutil.ReadFile(util.OBProxyDeploymentPath)
	if err != nil {

		log.Warning(err)
		return nil, err
	}

	if err := yaml.Unmarshal(yamlFile, &conf); err != nil {
		log.Warning(err)
		return nil, err
	}
	conf.Namespace = &ns
	return &conf, nil

}
func getOBProxyServiceConfByBaseYaml(ns string) (*v12.ServiceApplyConfiguration, error) {
	conf := v12.ServiceApplyConfiguration{}
	yamlFile, err := ioutil.ReadFile(util.OBProxyServicePath)
	if err != nil {
		log.Warning(err)
		return nil, err
	}

	if err := yaml.Unmarshal(yamlFile, &conf); err != nil {
		log.Warning(err)
		return nil, err
	}
	conf.Namespace = &ns
	return &conf, nil
}
