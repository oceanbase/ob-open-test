package obopentest_ob

import (
	"ob-open-test/util"
	"time"

	log "k8s.io/klog/v2"
)

type OBModel struct {
	Name  string
	Confs map[string]string
	OBC   *OBCluster
}

func NewOBModel() *OBModel {
	return &OBModel{}
}

func (ob *OBModel) GetName() string {
	return "ob-operator"
}
func (ob *OBModel) SetConf(confs map[string]string) error {
	if ob.Confs == nil {
		ob.Confs = make(map[string]string)
	}
	ob.Confs = confs
	OBClusterName, _ := confs["OBClusterName"]
	if OBClusterName == "" {
		OBClusterName = "test"
		ob.Confs["OBClusterName"] = "test"
	}
	obc := NewOBCluster(OBClusterName)
	ob.Name = OBClusterName
	obc.Tag = confs["version"]
	ob.OBC = obc
	return nil
}
func (ob *OBModel) Start() {
	ob.OBC.Apply()
}
func (ob *OBModel) Destory() {
	ob.OBC.Delete()
}
func (ob *OBModel) GetStatusTime() time.Duration {
	return 3 * time.Minute
}
func (ob *OBModel) WaitEnd(timeout time.Duration) int {
	timeend := time.Now().Add(timeout).Unix()
	for {
		OBClusterName, _ := ob.Confs["OBClusterName"]
		obc := NewOBCluster(OBClusterName)
		state := obc.State()
		if state == util.OBClusterStateReady {
			log.Info("[OBModel]" + ob.Name + "waitEnd Ready ")
			return 1
		}
		if time.Now().Unix() > timeend {
			return 2
		}
		time.Sleep(1 * time.Second)
	}
}
