package obopentest_ob

import (
	"encoding/base64"
	"io"
	"ob-open-test/k8sController"
	"ob-open-test/obopentest-ob/model"
	"ob-open-test/util"
	"os"
	"strings"

	"sigs.k8s.io/yaml"

	log "k8s.io/klog/v2"
)

func (c *OBCluster) BaseConf() string {
	conf, err := obclusterBaseYamlToStruct(util.OBClusterYamlPath)
	if err != nil {
		log.Warning(err)
		return ""
	}
	//charge label
	nodeSelector := make(map[string]string)
	nodeSelector["topology.kubernetes.io/zone"] = "zone"
	for _, zone := range conf.Spec.Topology[0].Zone {
		zone.NodeSelector = nodeSelector
	}

	//charge ns
	conf.Metadata.Name = c.OBClusterName
	conf.Metadata.Namespace = c.OBClusterName

	//conf.Spec.ClusterID = time.Now().Unix()
	str, err := yaml.Marshal(conf)
	if err != nil {
		log.Warning(err)
	}
	return string(str)
}
func CheckOBOperatorState() int {
	nodeList, err := k8sController.GetPodsInfoByNS(util.OBoperatorNamespacs)
	if err != nil {
		log.Warning(err)
		return util.Error
	}
	for _, node := range nodeList.Items {

		if strings.Contains(node.Name, util.OBoperatorPodName) {
			containerStatuses := node.Status.ContainerStatuses
			//容器没起来
			if len(containerStatuses) == 0 {
				return util.Error
			}
			//查read状态
			for _, containerStatus := range containerStatuses {
				if !containerStatus.Ready {
					return util.NotAllReady
				}
			}
		}
	}
	return util.Ready
}

func obclusterBaseYamlToStruct(yamlPath string) (*model.OBClusterYaml, error) {
	f, err := os.Open(yamlPath)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}

	input, _ := io.ReadAll(f)
	// base64 编码
	encodeString := base64.StdEncoding.EncodeToString(input)

	// base64 解码
	decodeBytes, err := base64.StdEncoding.DecodeString(encodeString)
	if err != nil {
		log.Fatalln(err)
		return nil, err
	}

	//yaml文件内容转换成map[interface{}]interface{})

	resultMap := model.OBClusterYaml{}
	if err := yaml.Unmarshal(decodeBytes, &resultMap); err != nil {
		// error handling
		log.Fatalln(err)
		return nil, err
	}
	return &resultMap, nil
}
