package model

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type OBClusterYaml struct {
	ApiVersion string        `yaml:"apiVersion"`
	Kind       string        `yaml:"kind"`
	Metadata   Metadata      `yaml:"metadata"`
	Spec       OBClusterSpec `yaml:"spec"`
}

type Metadata struct {
	Name      string `yaml:"name"`
	Namespace string `yaml:"namespace"`
}

type Resources struct {
	Cpu     int       `yaml:"cpu"`
	Memory  string    `yaml:"memory"`
	Storage []Storage `yaml:"storage"`
}

type Storage struct {
	Name             string `yaml:"name"`
	StorageClassName string `yaml:"storageClassName"`
	Size             string `yaml:"size"`
}

// OBClusterSpec defines the desired state of OBCluster
type OBClusterSpec struct {
	ImageRepo string `yaml:"imageRepo"`
	Tag       string `yaml:"tag"`
	// +kubebuilder:validation:Minimum=1
	ClusterID    int           `yaml:"clusterID"`
	ImageObagent string        `yaml:"imageObagent"`
	Topology     []Cluster     `yaml:"topology"`
	Resources    ResourcesSpec `yaml:"resources"`
}

type Cluster struct {
	Cluster    string      `yaml:"cluster"`
	Zone       []Subset    `yaml:"zone"`
	Parameters []Parameter `yaml:"parameters"`
}

type Parameter struct {
	Name  string `yaml:"name"`
	Value string `yaml:"value"`
}

type ResourcesSpec struct {
	CPU     int           `yaml:"cpu"`
	Memory  string        `yaml:"memory"`
	Storage []StorageSpec `yaml:"storage"`
}

type StorageSpec struct {
	Name             string `yaml:"name"`
	StorageClassName string `yaml:"storageClassName"`
	Size             string `yaml:"size"`
}

// OBClusterStatus defines the observed state of OBCluster
type OBClusterStatus struct {
	Status   string          `yaml:"status"`
	Topology []ClusterStatus `yaml:"topology"`
}

type ClusterStatus struct {
	Cluster            string       `yaml:"cluster"`
	ClusterStatus      string       `yaml:"clusterStatus"`
	LastTransitionTime metav1.Time  `yaml:"lastTransitionTime"`
	Zone               []ZoneStatus `yaml:"zone"`
}

type ZoneStatus struct {
	Name              string `yaml:"name"`
	Region            string `yaml:"region"`
	ZoneStatus        string `yaml:"zoneStatus"`
	ExpectedReplicas  int    `yaml:"expectedReplicas"`
	AvailableReplicas int    `yaml:"availableReplicas"`
}

// +genclient
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// OBCluster is the Schema for the obclusters API
type OBCluster struct {
	metav1.TypeMeta   `yaml:",inline"`
	metav1.ObjectMeta `yaml:"metadata"`

	Spec   OBClusterSpec   `yaml:"spec"`
	Status OBClusterStatus `yaml:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OBClusterList contains a list of OBCluster
type OBClusterList struct {
	metav1.TypeMeta `yaml:",inline"`
	metav1.ListMeta `yaml:"metadata,omitempty"`
	Items           []OBCluster `yaml:"items"`
}
type Subset struct {
	Name         string            `yaml:"name"`
	Region       string            `yaml:"region,omitempty"`
	NodeSelector map[string]string `yaml:"nodeSelector"`
	// +kubebuilder:validation:Minimum=1
	Replicas int `yaml:"replicas"`
}
