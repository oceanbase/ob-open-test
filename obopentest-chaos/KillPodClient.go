package obopentest_chaos

import (
	"context"
	"errors"
	"ob-open-test/k8sController"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/json"
	log "k8s.io/klog/v2"
)

type ChaosKillPodClient struct {
	Name string
	Obj  interface{}
}

type ChaosKillPodClientCreateObj struct {
}

func (c *ChaosKillPodClient) Create(ctx context.Context, obj interface{}) error {
	log.Info("start kill pod")
	data1, _ := json.Marshal(obj)
	log.Info("ChaosKillPodClient Create obj: " + string(data1))
	//onj type check
	var conf ChaosKillPodClientObj
	conf.SetNS(obj.(ChaosClientObj).GetNS())
	conf.SetPodName(obj.(ChaosClientObj).GetPodName())

	defaultKillPod := k8sController.GetObjFromYaml("chaosblade/delete_pod_by_names.yaml")
	_, kclient := k8sController.NewClient()
	if conf.PodName == "" {
		opts := metav1.ListOptions{}
		podlist, _ := kclient.ClientSet.CoreV1().Pods(conf.NS).List(context.TODO(), opts)
		if len(podlist.Items) == 0 {
			err := errors.New(conf.NS + " is not exist pods")
			log.Warning(err)
			return err
		}
	}
	experdata := []ExperimentSpec{}
	killdata := []FlagSpec{}
	killdata = append(killdata, FlagSpec{
		Name:  "namespace",
		Value: []string{conf.NS},
	})
	killdata = append(killdata, FlagSpec{
		Name:  "names",
		Value: []string{conf.PodName},
	})
	experdata = append(experdata, ExperimentSpec{
		Matchers: killdata,
	})
	defaultKillPod.Object["spec"].(map[string]interface{})["experiments"] = experdata

	return kclient.CreateObj(defaultKillPod)

}

func (c *ChaosKillPodClient) Delete(ctx context.Context, obj interface{}) error {
	log.Warning("ChaosKillPodClient can't be Deleted")
	return nil
}
func (c *ChaosKillPodClient) Info(ctx context.Context, obj interface{}) error {
	return nil
}
func (c *ChaosKillPodClient) SetObj(obj ChaosClientObj) {
	c.Obj = obj
}
func (c *ChaosKillPodClient) Newobj() ChaosClientObj {
	obj := new(ChaosKillPodClientObj)
	return obj
}
func (c *ChaosKillPodClient) GetObj() ChaosClientObj {
	return c.Obj.(ChaosClientObj)
}

type ChaosKillPodClientObj struct {
	NS      string
	PodName string
}

func (cc *ChaosKillPodClientObj) SetNS(ns string) {
	cc.NS = ns
}
func (cc *ChaosKillPodClientObj) SetPodName(podName string) {
	cc.PodName = podName
}
func (cc *ChaosKillPodClientObj) GetNS() string {
	return cc.NS
}
func (cc *ChaosKillPodClientObj) GetPodName() string {
	return cc.PodName
}
