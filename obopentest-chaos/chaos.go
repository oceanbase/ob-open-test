package obopentest_chaos

import (
	"context"
	"errors"
	"fmt"
	obopentestOB "ob-open-test/obopentest-ob"
	"time"

	log "k8s.io/klog/v2"
)

type ChaosModel struct {
	Name  string
	Confs map[string]string
	CC    ChaosClient
}

func NewChaosModel() *ChaosModel {
	return &ChaosModel{}
}

func (cm *ChaosModel) GetName() string {
	return "chaosblade"
}
func (cm *ChaosModel) SetConf(confs map[string]string) error {
	log.Info("ChaosModel SetConf confs:" + fmt.Sprint(confs))
	cm.Confs = confs
	ns, _ := confs["ns"]
	ob := obopentestOB.NewOBCluster(confs["OBClusterName"])
	ob.Ping()
	ns = ob.OBClusterName

	pod, _ := confs["pod"]
	//只针对ob集群
	if pod == "" {
		if len(ob.Pods) == 0 {
			err := errors.New("pod is not exist!")
			log.Warning(err)
			return err
		}
		pod = ob.Pods[0].GetName()
	}

	//
	chaosType, _ := confs["type"]

	chaosclient, err := NewChaosClient(chaosType)
	if err != nil {
		log.Warning(err)
		return err
	}
	cm.CC = chaosclient
	obj := cm.CC.Newobj()
	obj.SetNS(ns)
	obj.SetPodName(pod)
	log.Info(obj)
	cm.CC.SetObj(obj)
	if err != nil {
		log.Warning(err)
		return err
	}
	cm.CC = chaosclient
	return nil
}
func (cm *ChaosModel) Start() {
	log.Info("ChaosModel start ")

	if cm.Confs == nil {
		cm.Confs = make(map[string]string)
	}
	//OBClusterName, _ := cm.Confs["OBClusterName"]
	//if OBClusterName == "" {
	//	OBClusterName = "test"
	//	cm.Confs["OBClusterName"] = "test"
	//}
	if err := cm.CC.Create(context.TODO(), cm.CC.GetObj()); err != nil {
		log.Warning(err)
		return
	}

	return

}
func (cm *ChaosModel) Destory() {
	if err := cm.CC.Delete(context.TODO(), cm.CC.GetObj()); err != nil {

		log.Warning(err)
		log.Warning(cm.CC.GetObj())

		return
	}
}
func (cm *ChaosModel) GetStatusTime() time.Duration {
	return 3 * time.Minute
}
func (cm *ChaosModel) WaitEnd(timeout time.Duration) int {

	return 1
}
