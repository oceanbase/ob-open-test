package obopentest_chaos

import (
	"context"
	"errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	log "k8s.io/klog/v2"
)

// Chaos knows how to operate the chaos provided by pingcap/chaos-mesh
type ChaosClient interface {
	Create(ctx context.Context, obj interface{}) error
	Delete(ctx context.Context, obj interface{}) error
	Info(ctx context.Context, obj interface{}) error
	Newobj() ChaosClientObj
	SetObj(obj ChaosClientObj)
	GetObj() ChaosClientObj
}

// NewChaosClient New will Create a chaos client.
func NewChaosClient(Type string) (ChaosClient, error) {
	log.Info("NewChaosClient is " + Type)
	switch Type {
	case "killPod":
		cc := ChaosKillPodClient{}
		cc.Obj = ChaosKillPodClientObj{}
		return &cc, nil
	case "netWorkDealay":
		cc := ChaosNetWorkDealayClient{}
		cc.Obj = ChaosNetWorkDealayClientObj{}
		return &cc, nil
	default:
		return nil, errors.New("chaos type is not exist")
	}

}

type ChaosClientObj interface {
	SetNS(ns string)
	SetPodName(podName string)
	GetNS() string
	GetPodName() string
}

type FlagSpec struct {
	// Name is the name of flag
	Name string `json:"name"`
	// TODO: Temporarily defined as an array for all flags
	// Value is the value of flag
	Value []string `json:"value"`
}

type ChaosBladeSpec struct {
	Experiments []ExperimentSpec `json:"experiments"`
}

type ExperimentSpec struct {
	// Scope is the area of the experiments, currently support node, pod and container
	Scope string `json:"scope"`
	// Target is the experiment target, such as cpu, network
	Target string `json:"target"`
	// Action is the experiment scenario of the target, such as delay, load
	Action string `json:"action"`
	// Desc is the experiment description
	Desc string `json:"desc,omitempty"`
	// Matchers is the experiment rules
	Matchers []FlagSpec `json:"matchers,omitempty"`
}
type ChaosBlade struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ChaosBladeSpec   `json:"spec,omitempty"`
	Status ChaosBladeStatus `json:"status,omitempty"`
}
type ClusterPhase struct{}
type ChaosBladeStatus struct {
	// Phase indicates the state of the experiment
	//   Initial -> Running -> Updating -> Destroying -> Destroyed
	Phase       ClusterPhase       `json:"phase,omitempty"`
	ExpStatuses []ExperimentStatus `json:"expStatuses"`
}
type ExperimentStatus struct {
	// experiment scope for cache
	Scope  string `json:"scope"`
	Target string `json:"target"`
	Action string `json:"action"`
	// Success is used to judge the experiment result
	Success bool `json:"success"`
	// State is used to describe the experiment result
	State string `json:"state"`
	Error string `json:"error,omitempty"`
	// ResStatuses is the details of the experiment
	ResStatuses []ResourceStatus `json:"resStatuses,omitempty"`
}
type ResourceStatus struct {
	// experiment uid in chaosblade
	Id string `json:"id,omitempty"`
	// experiment state
	State string `json:"state"`
	// experiment code
	Code int32 `json:"code,omitempty"`
	// experiment error
	Error string `json:"error,omitempty"`
	// success
	Success bool `json:"success"`

	// Kind
	Kind string `json:"kind"`
	// Resource identifier, rules as following:
	// container: Namespace/NodeName/PodName/ContainerName
	// podï¼š Namespace/NodeName/PodName
	Identifier string `json:"identifier,omitempty"`
}
