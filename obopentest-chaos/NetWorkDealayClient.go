package obopentest_chaos

import (
	"context"
	"errors"
	log "k8s.io/klog/v2"
)

type ChaosNetWorkDealayClient struct {
	Name string
	Obj  interface{}
}

func (c *ChaosNetWorkDealayClient) Create(ctx context.Context, obj interface{}) error {
	//onj type check
	switch obj.(type) {
	case ChaosKillPodClientCreateObj:
		log.Info(obj)
	default:
		return errors.New("conf is error")
	}
	return nil
}
func (c *ChaosNetWorkDealayClient) Delete(ctx context.Context, obj interface{}) error {
	//onj type check
	switch obj.(type) {
	case ChaosNetWorkDealayClientObj:
		log.Info(obj)
	default:
		return errors.New("conf is error")
	}
	return nil
}
func (c *ChaosNetWorkDealayClient) Info(ctx context.Context, obj interface{}) error {
	return nil
}

func (c *ChaosNetWorkDealayClient) SetObj(obj ChaosClientObj) {
	c.Obj = obj
}
func (c *ChaosNetWorkDealayClient) Newobj() ChaosClientObj {
	return &ChaosNetWorkDealayClientObj{}
}
func (c *ChaosNetWorkDealayClient) GetObj() ChaosClientObj {
	return c.Obj.(ChaosClientObj)
}

type ChaosNetWorkDealayClientObj struct {
	NS      string
	PodName string
}

func (cc *ChaosNetWorkDealayClientObj) SetNS(ns string) {
	cc.NS = ns
}
func (cc *ChaosNetWorkDealayClientObj) SetPodName(podName string) {
	cc.PodName = podName
}
func (cc *ChaosNetWorkDealayClientObj) GetNS() string {
	return cc.NS
}
func (cc *ChaosNetWorkDealayClientObj) GetPodName() string {
	return cc.PodName
}
