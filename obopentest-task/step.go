package obopentest_task

import (
	"k8s.io/apimachinery/pkg/util/json"
	log "k8s.io/klog/v2"
	"sync"
)

//步骤内包括各组件信息以及执行方式
type Step struct {
	Name   string
	Type   int
	Models []Model
}

func NewStep() *Step {
	return &Step{}
}
func (s *Step) AddModel(model Model) {
	s.Models = append(s.Models, model)
}

const (
	StepModelTimeout      = 2
	StepModelStartSuccess = 1
)

func (s *Step) Start() {
	data, _ := json.Marshal(&s)
	log.Info(s.Name + " step start, data is " + string(data))
	switch s.Type {
	case StepTypeParallel:
		stepwp := sync.WaitGroup{}
		for i := 0; i < len(s.Models); i++ {
			i := i
			go func() {
				stepwp.Add(1)
				log.Info(s.Models[i].GetName() + " model start")
				s.Models[i].Start()
				stepwp.Done()

			}()
		}
		stepwp.Wait()

	case StepTypeSerial:
		for i := 0; i < len(s.Models); i++ {
			log.Info(s.Models[i].GetName() + " model start")
			s.Models[i].Start()
		}
	default:
		log.Warning("StepTypeError")
		return
	}
}
func (s *Step) Destory() {

	for i := 0; i < len(s.Models); i++ {
		s.Models[i].Destory()
	}
	log.Info(s.Name + " destory end")
}

func StepTypeToString(stepType int) string {
	switch stepType {
	case StepTypeParallel:
		return "StepTypeParallel"
	case StepTypeSerial:
		return "StepTypeParallelSerial"
	default:
		return ""
	}
}
