package obopentest_task

import (
	"errors"
	log "k8s.io/klog/v2"
)

//任务
type Task struct {
	//任务名
	Name string
	//步骤
	Steps []Step
	//任务状态
	State string
	//创建时间
	CreateTime int64
}

//Task is execution
func NewTask() *Task {
	return &Task{}
}
func (t *Task) SetName(name string) {
	t.Name = name
}

func (t *Task) Start() error {
	//合法性解析
	if err := taskInfoLawful(t); err != nil {
		return err
	}
	log.Info(t.Name + " task start")
	for i := 0; i < len(t.Steps); i++ {
		step := t.Steps[i]

		step.Start()
		for j := 0; j < len(step.Models); j++ {
			model := step.Models[j]
			if model.WaitEnd(model.GetStatusTime()) != StepModelStartSuccess {
				log.Warning(model.GetName() + " start timeout")

			}

		}
	}
	return nil
}

func (t *Task) Get(Name string) (*Task, error) {
	return nil, nil
}
func (t *Task) Stop() error {
	return nil
}
func (t *Task) Destory() error {
	//合法性解析
	if err := taskInfoLawful(t); err != nil {
		return err
	}
	log.Info(t.Name + " task start")
	for i := 0; i < len(t.Steps); i++ {
		step := t.Steps[i]
		log.Info(step.Name + " step destory")
		step.Destory()
	}
	return nil
}
func (t *Task) AddStep(step Step) error {
	t.Steps = append(t.Steps, step)
	return nil
}

func taskInfoLawful(t *Task) error {
	//name
	if len(t.Name) == 0 || len(t.Name) > 64 {
		return errors.New("task's name is not foLawful")
	}
	//Steps
	for _, step := range t.Steps {
		//name
		if len(step.Name) > 64 {
			return errors.New("step's name is not foLawful")
		}
		if step.Name == "" {
			step.Name = t.Name
		}
		//type是否合法
		if len(StepTypeToString(step.Type)) == 0 {
			return errors.New("step type is error")
		}
	}
	return nil
}
